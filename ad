[1mdiff --git a/handler/user.go b/handler/user.go[m
[1mindex c33390a..2bc6114 100644[m
[1m--- a/handler/user.go[m
[1m+++ b/handler/user.go[m
[36m@@ -93,5 +93,46 @@[m [mfunc (h *userHandler) Login(c *gin.Context){[m
 [m
 	response := helper.APIResponse("Successfuly loggedin", http.StatusOK, "Success", formatter)[m
 [m
[32m+[m	[32mc.JSON(http.StatusOK, response)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (h *userHandler) CheckEmailAvailability(c *gin.Context) {[m
[32m+[m	[32m// ada input email dari user[m
[32m+[m	[32m// input email di-mapping ke struct input[m
[32m+[m	[32m// struct input di-pasing ke service[m
[32m+[m	[32m// service akan memanggil - email sudah ada atau belum[m
[32m+[m	[32m// repository - db[m[41m [m
[32m+[m	[32mvar input user.CheckEmailInput[m
[32m+[m
[32m+[m	[32merr := c.ShouldBindJSON(&input)[m
[32m+[m	[32mif err != nil{[m
[32m+[m		[32m//pemanggilan dari helper[m
[32m+[m		[32merrors := helper.FormatValidationError(err)[m
[32m+[m		[32merrorMessage := gin.H{"errors": errors}[m
[32m+[m[41m		[m
[32m+[m		[32mresponse := helper.APIResponse("Email Checking Failed", http.StatusUnprocessableEntity, "error", errorMessage)[m[41m	[m
[32m+[m		[32mc.JSON(http.StatusUnprocessableEntity, response)[m
[32m+[m		[32mreturn[m
[32m+[m	[32m}[m
[32m+[m	[32misEmailAvailable, err := h.userService.IsEmailAvailable(input)[m
[32m+[m	[32mif err != nil{[m
[32m+[m		[32merrorMessage := gin.H{"errors": "Server Error"}[m
[32m+[m		[32mresponse := helper.APIResponse("Email Checking Failed", http.StatusUnprocessableEntity, "error", errorMessage)[m[41m	[m
[32m+[m		[32mc.JSON(http.StatusUnprocessableEntity, response)[m
[32m+[m		[32mreturn[m[41m		[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mdata := gin.H{[m
[32m+[m		[32m"is_available": isEmailAvailable,[m
[32m+[m	[32m}[m
[32m+[m	[32mvar metaMessage string[m
[32m+[m
[32m+[m	[32mif isEmailAvailable{[m
[32m+[m		[32mmetaMessage = "Email is available"[m
[32m+[m	[32m}else{[m
[32m+[m		[32mmetaMessage = "Email has been registered"[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mresponse := helper.APIResponse(metaMessage, http.StatusOK, "success", data)[m[41m	[m
 	c.JSON(http.StatusOK, response)[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/main.go b/main.go[m
[1mindex 3e1c6d2..9a6dfd4 100644[m
[1m--- a/main.go[m
[1m+++ b/main.go[m
[36m@@ -31,6 +31,7 @@[m [mimport ([m
 [m
 	api.POST("/users", userHandler.RegisterUser)[m
 	api.POST("/sessions", userHandler.Login)[m
[32m+[m	[32mapi.POST("/email_checkers", userHandler.CheckEmailAvailability)[m
 	router.Run()[m
 [m
 [m
[1mdiff --git a/user/input.go b/user/input.go[m
[1mindex ccd05ef..1c52635 100644[m
[1m--- a/user/input.go[m
[1m+++ b/user/input.go[m
[36m@@ -3,13 +3,17 @@[m [mpackage user[m
 //dari form input (UI)[m
 [m
 type RegisterUserInput struct {[m
[31m-	Name       string	`json:"name" binding:"required"`[m
[31m-	Occupation string	`json:"occupation" binding:"required"`[m
[31m-	Email      string	`json:"email" binding:"required,email"`[m
[31m-	Password   string	`json:"password" binding:"required"`[m
[32m+[m	[32mName       	string	`json:"name" binding:"required"`[m
[32m+[m	[32mOccupation 	string	`json:"occupation" binding:"required"`[m
[32m+[m	[32mEmail      	string	`json:"email" binding:"required,email"`[m
[32m+[m	[32mPassword   	string	`json:"password" binding:"required"`[m
 } [m
 [m
 type LoginInput struct{[m
 	Email		string		`json:"email" binding:"required,email"`[m
 	Password	string		`json:"password" binding:"required"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype CheckEmailInput struct{[m
[32m+[m	[32mEmail		string		`json:"email" binding:"required,email"`[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/user/sevice.go b/user/sevice.go[m
[1mindex 64c10aa..1311253 100644[m
[1m--- a/user/sevice.go[m
[1m+++ b/user/sevice.go[m
[36m@@ -13,6 +13,9 @@[m [mtype Service interface {[m
 	RegisterUser(input RegisterUserInput) (User, error)[m
 	//login[m
 	Login(input LoginInput)(User, error)[m
[32m+[m	[32m//cari email[m[41m [m
[32m+[m	[32mIsEmailAvailable(input CheckEmailInput) (bool, error)[m
[32m+[m
 }[m
 [m
 type service struct {[m
[36m@@ -61,4 +64,19 @@[m [mfunc (s *service) Login(input LoginInput)(User, error){[m
 	return user, nil[m
 }[m
 //mapping struck input ke struck user[m
[31m-//simpan struck user melalui repository[m
\ No newline at end of file[m
[32m+[m[32m//simpan struck user melalui repository[m
[32m+[m
[32m+[m
[32m+[m[32m//cari email ketika input[m[41m [m
[32m+[m[32mfunc (s *service) IsEmailAvailable(input CheckEmailInput) (bool, error) {[m
[32m+[m	[32memail := input.Email[m
[32m+[m
[32m+[m	[32muser, err := s.repository.FindByEmail(email)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn false, err[m[41m	[m
[32m+[m	[32m}[m[41m	[m
[32m+[m	[32mif user.ID == 0 {[m
[32m+[m		[32mreturn true, nil[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn false, nil[m
[32m+[m[32m}[m
\ No newline at end of file[m
